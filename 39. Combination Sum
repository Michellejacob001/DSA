https://leetcode.com/problems/combination-sum/

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> ds;
        spp(0,candidates,result, target, ds);
        
        return result;
    }
    
void spp(int ind, vector<int> &arr, vector<vector<int>> &result, int target,  vector<int> &ds){
    if(ind==arr.size()){
        if(target==0){
            result.push_back(ds);
        }
        return;
    }
    if(arr[ind]<=target)
    {
        ds.push_back(arr[ind]);
        spp(ind, arr, result, target-arr[ind], ds);
        ds.pop_back();
        
    }
  
       spp(ind+1,arr,result, target, ds);
    
}
};



// class Solution {
// public: 
//     void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds) {
//         if(ind == arr.size()) {
//             if(target == 0) {
//                 ans.push_back(ds); 
//             }
//             return; 
//         }
//         // pick up the element 
//         if(arr[ind] <= target) {
//             ds.push_back(arr[ind]); 
//             findCombination(ind, target - arr[ind], arr, ans, ds); 
//             ds.pop_back(); 
//         }
        
//         findCombination(ind+1, target, arr, ans, ds); 
        
//     }
// public:
//     vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
//         vector<vector<int>> ans; 
//         vector<int> ds; 
//         findCombination(0, target, candidates, ans, ds); 
//         return ans; 
//     }
// };
