https://leetcode.com/problems/combination-sum-ii/

https://www.youtube.com/watch?v=G1fRTGRxXU8&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&index=11

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int i;        
        vector<int> ds;
         vector<vector<int>> result;
             sort(candidates.begin(), candidates.end());
       spp(0,candidates,target,ds,result);
        return result;
    }
    
    void spp(int ind, vector<int>& arr, int target,   vector<int>& ds,  vector<vector<int>>& result){
        int i;
      
            if(target==0){
                result.push_back(ds);
                  return;
            }
          
        
        
            for(int i=ind;i<arr.size();++i){
                if(i>ind && arr[i]==arr[i-1]){
 continue;
                }
                                               if(arr[i]>target){
                                                   break;}
             ds.push_back(arr[i]);
             spp(i+1,arr,target-arr[i],ds,result);
ds.pop_back();
            
            
        
            }
        }
};



// class Solution {
//     public: 
//     void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds) {
//         if(target==0) {
//             ans.push_back(ds);
//             return;
//         }        
//         for(int i = ind;i<arr.size();i++) {
//             if(i>ind && arr[i]==arr[i-1]) continue; 
//             if(arr[i]>target) break; 
//             ds.push_back(arr[i]);
//             findCombination(i+1, target - arr[i], arr, ans, ds); 
//             ds.pop_back(); 
//         }
//     }
// public:
//     vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
//         sort(candidates.begin(), candidates.end());
//         vector<vector<int>> ans; 
//         vector<int> ds; 
//         findCombination(0, target, candidates, ans, ds); 
//         return ans; 
//     }
// };
