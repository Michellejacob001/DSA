https://www.hackerrank.com/challenges/one-week-preparation-kit-mini-max-sum/problem?isFullScreen=true&h_l=interview&playlist_slugs%5B%5D=preparation-kits&playlist_slugs%5B%5D=one-week-preparation-kit&playlist_slugs%5B%5D=one-week-day-one

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'miniMaxSum' function below.
 *
 * The function accepts INTEGER_ARRAY arr as parameter.
 */


// vector<int> spp(int ind, vector<int> arr,vector<int> ds){
//     int i,min1=INT_MAX,sum1=0,sum2=0,max2=INT_MIN,cnt=0;
//     vector<int> res;
    

//     if(cnt<=4){
//         ds.push_back(arr[i]);
//          sum1=arr[i]+sum1;
//          ++cnt;
//     }
//     spp(i+1,arr,ds);
//     ds.pop_back();
   
   

//  min1=min(sum1,min1);
// }

void miniMaxSum(vector<int> arr) {
//     vector<int> ds;
// int i;
// spp(0,arr,ds);
int s=0,s1=0;
sort(arr.begin(),arr.end());
for(int i=0;i<4;++i)
 s+=arr[i];
for(int i=4;i>0;--i)
 s1+=arr[i];
 cout<<s<<" "<<s1;
}

int main()
{

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(5);

    for (int i = 0; i < 5; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    miniMaxSum(arr);

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
